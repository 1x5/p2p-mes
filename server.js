const express = require('express');
const http = require('http');
const WebSocket = require('ws');

const app = express();
const server = http.createServer(app);
const wss = new WebSocket.Server({ server });

const PORT = process.env.PORT || 3000;
const MAX_CLIENTS = 2;

let clients = new Set();

wss.on('connection', (ws) => {
  console.log('–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
  if (clients.size >= MAX_CLIENTS) {
    ws.send(JSON.stringify({
      type: 'error',
      message: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π (–º–∞–∫—Å. 2)'
    }));
    ws.close();
    return;
  }

  // –ù–∞–∑–Ω–∞—á–∞–µ–º ID: –ø–µ—Ä–≤—ã–π = 1, –≤—Ç–æ—Ä–æ–π = 2
  ws.clientId = clients.size + 1;
  clients.add(ws);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É –µ–≥–æ ID
  ws.send(JSON.stringify({
    type: 'init',
    clientId: ws.clientId
  }));
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
  broadcastStatus();

  ws.on('message', (message) => {
    try {
      const data = JSON.parse(message);
      console.log('–ü–æ–ª—É—á–µ–Ω–æ:', data.type);

      // –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ WebRTC –¥—Ä—É–≥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
      clients.forEach((client) => {
        if (client !== ws && client.readyState === WebSocket.OPEN) {
          client.send(message);
        }
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  });

  ws.on('close', () => {
    console.log('–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è');
    clients.delete(ws);
    broadcastStatus();
  });

  ws.on('error', (error) => {
    console.error('WebSocket –æ—à–∏–±–∫–∞:', error);
    clients.delete(ws);
    broadcastStatus();
  });
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
function broadcastStatus() {
  const online = clients.size === MAX_CLIENTS;
  
  clients.forEach((client) => {
    if (client.readyState === WebSocket.OPEN) {
      const status = {
        type: 'status',
        online: online,
        count: clients.size,
        shouldInitiate: client.clientId === 1 && online // –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç
      };
      client.send(JSON.stringify(status));
    }
  });

  console.log(`–°—Ç–∞—Ç—É—Å: ${clients.size}/${MAX_CLIENTS} –∫–ª–∏–µ–Ω—Ç–æ–≤`);
}

server.listen(PORT, () => {
  console.log(`üöÄ –°–∏–≥–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`   WebSocket: ws://localhost:${PORT}`);
});

